import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Customer, CustomerDetailed, CustomerFilters, CustomerType } from '../types/customer.types';

interface CustomerState {
  customers: Customer[];
  selectedCustomer: CustomerDetailed | null;
  loading: boolean;
  error: string | null;
  filters: CustomerFilters;
  totalCount: number;
}

const initialState: CustomerState = {
  customers: [
    // Individuals
    {
      id: '1',
      type: CustomerType.INDIVIDUAL,
      firstName: 'John',
      lastName: 'Doe',
      idNumber: 'ID1234567890',
      dateOfBirth: '1990-01-01',
      address: '123 Main St',
      phone: '+1234567890',
      email: 'john.doe@example.com',
      secondaryPhone: '+1234567891',
      secondaryEmail: 'john.secondary@example.com',
      additionalNotes: 'VIP customer',
    },
    {
      id: '2',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Jane',
      lastName: 'Smith',
      idNumber: 'ID0987654321',
      dateOfBirth: '1985-05-15',
      address: '456 Oak Ave',
      phone: '+1234567892',
      email: 'jane.smith@example.com',
      secondaryPhone: '+1234567893',
      secondaryEmail: 'jane.secondary@example.com',
      additionalNotes: 'Frequent buyer',
    },
    {
      id: '3',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Alice',
      lastName: 'Johnson',
      idNumber: 'ID1122334455',
      dateOfBirth: '1992-07-20',
      address: '789 Pine Rd',
      phone: '+1234567894',
      email: 'alice.johnson@example.com',
      secondaryPhone: '+1234567895',
      secondaryEmail: 'alice.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '4',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Bob',
      lastName: 'Williams',
      idNumber: 'ID2233445566',
      dateOfBirth: '1988-03-10',
      address: '321 Maple St',
      phone: '+1234567896',
      email: 'bob.williams@example.com',
      secondaryPhone: '+1234567897',
      secondaryEmail: 'bob.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '5',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Charlie',
      lastName: 'Brown',
      idNumber: 'ID3344556677',
      dateOfBirth: '1995-11-30',
      address: '654 Cedar Ave',
      phone: '+1234567898',
      email: 'charlie.brown@example.com',
      secondaryPhone: '+1234567899',
      secondaryEmail: 'charlie.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '6',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Diana',
      lastName: 'Evans',
      idNumber: 'ID4455667788',
      dateOfBirth: '1991-09-25',
      address: '987 Birch Blvd',
      phone: '+1234567800',
      email: 'diana.evans@example.com',
      secondaryPhone: '+1234567801',
      secondaryEmail: 'diana.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '7',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Ethan',
      lastName: 'Miller',
      idNumber: 'ID5566778899',
      dateOfBirth: '1987-12-12',
      address: '159 Spruce Dr',
      phone: '+1234567802',
      email: 'ethan.miller@example.com',
      secondaryPhone: '+1234567803',
      secondaryEmail: 'ethan.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '8',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Fiona',
      lastName: 'Clark',
      idNumber: 'ID6677889900',
      dateOfBirth: '1993-04-18',
      address: '753 Willow Ln',
      phone: '+1234567804',
      email: 'fiona.clark@example.com',
      secondaryPhone: '+1234567805',
      secondaryEmail: 'fiona.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '9',
      type: CustomerType.INDIVIDUAL,
      firstName: 'George',
      lastName: 'Lewis',
      idNumber: 'ID7788990011',
      dateOfBirth: '1989-08-22',
      address: '852 Aspen Ct',
      phone: '+1234567806',
      email: 'george.lewis@example.com',
      secondaryPhone: '+1234567807',
      secondaryEmail: 'george.secondary@example.com',
      additionalNotes: '',
    },
    {
      id: '10',
      type: CustomerType.INDIVIDUAL,
      firstName: 'Hannah',
      lastName: 'Walker',
      idNumber: 'ID8899001122',
      dateOfBirth: '1994-06-05',
      address: '951 Poplar Pl',
      phone: '+1234567808',
      email: 'hannah.walker@example.com',
      secondaryPhone: '+1234567809',
      secondaryEmail: 'hannah.secondary@example.com',
      additionalNotes: '',
    },

    // Businesses
    {
      id: '11',
      type: CustomerType.BUSINESS,
      legalName: 'Acme Corp',
      nuisNipt: 'NIPT12345678',
      administratorName: 'Alice Smith',
      administratorId: 'A123',
      administratorPosition: 'CEO',
      mainShareholders: 'Alice Smith, Bob Brown',
      address: '456 Business Rd',
      phone: '+1987654321',
      email: 'contact@acmecorp.com',
      secondaryPhone: '+1987654322',
      secondaryEmail: 'admin@acmecorp.com',
      additionalNotes: 'Important partner',
    },
    {
      id: '12',
      type: CustomerType.BUSINESS,
      legalName: 'Beta LLC',
      nuisNipt: 'NIPT87654321',
      administratorName: 'Brian Adams',
      administratorId: 'B456',
      administratorPosition: 'Manager',
      mainShareholders: 'Brian Adams, Carol White',
      address: '789 Commerce St',
      phone: '+1987654323',
      email: 'info@betallc.com',
      secondaryPhone: '+1987654324',
      secondaryEmail: 'support@betallc.com',
      additionalNotes: '',
    },
    {
      id: '13',
      type: CustomerType.BUSINESS,
      legalName: 'Gamma Industries',
      nuisNipt: 'NIPT23456789',
      administratorName: 'Carol White',
      administratorId: 'C789',
      administratorPosition: 'Director',
      mainShareholders: 'Carol White, David Black',
      address: '321 Industry Ave',
      phone: '+1987654325',
      email: 'contact@gamma.com',
      secondaryPhone: '+1987654326',
      secondaryEmail: 'admin@gamma.com',
      additionalNotes: '',
    },
    {
      id: '14',
      type: CustomerType.BUSINESS,
      legalName: 'Delta Partners',
      nuisNipt: 'NIPT34567890',
      administratorName: 'David Black',
      administratorId: 'D012',
      administratorPosition: 'Partner',
      mainShareholders: 'David Black, Emma Green',
      address: '654 Enterprise Blvd',
      phone: '+1987654327',
      email: 'info@delta.com',
      secondaryPhone: '+1987654328',
      secondaryEmail: 'support@delta.com',
      additionalNotes: '',
    },
    {
      id: '15',
      type: CustomerType.BUSINESS,
      legalName: 'Epsilon Group',
      nuisNipt: 'NIPT45678901',
      administratorName: 'Emma Green',
      administratorId: 'E345',
      administratorPosition: 'Owner',
      mainShareholders: 'Emma Green, Frank Blue',
      address: '987 Corporate Cir',
      phone: '+1987654329',
      email: 'contact@epsilon.com',
      secondaryPhone: '+1987654330',
      secondaryEmail: 'admin@epsilon.com',
      additionalNotes: '',
    },
    {
      id: '16',
      type: CustomerType.BUSINESS,
      legalName: 'Zeta Holdings',
      nuisNipt: 'NIPT56789012',
      administratorName: 'Frank Blue',
      administratorId: 'F678',
      administratorPosition: 'President',
      mainShareholders: 'Frank Blue, Grace Red',
      address: '159 Business Park',
      phone: '+1987654331',
      email: 'info@zeta.com',
      secondaryPhone: '+1987654332',
      secondaryEmail: 'support@zeta.com',
      additionalNotes: '',
    },
    {
      id: '17',
      type: CustomerType.BUSINESS,
      legalName: 'Eta Solutions',
      nuisNipt: 'NIPT67890123',
      administratorName: 'Grace Red',
      administratorId: 'G901',
      administratorPosition: 'Lead',
      mainShareholders: 'Grace Red, Henry Yellow',
      address: '753 Tech Dr',
      phone: '+1987654333',
      email: 'contact@eta.com',
      secondaryPhone: '+1987654334',
      secondaryEmail: 'admin@eta.com',
      additionalNotes: '',
    },
    {
      id: '18',
      type: CustomerType.BUSINESS,
      legalName: 'Theta Ventures',
      nuisNipt: 'NIPT78901234',
      administratorName: 'Henry Yellow',
      administratorId: 'H234',
      administratorPosition: 'Founder',
      mainShareholders: 'Henry Yellow, Ivy Orange',
      address: '852 Startup Ln',
      phone: '+1987654335',
      email: 'info@theta.com',
      secondaryPhone: '+1987654336',
      secondaryEmail: 'support@theta.com',
      additionalNotes: '',
    },
    {
      id: '19',
      type: CustomerType.BUSINESS,
      legalName: 'Iota Enterprises',
      nuisNipt: 'NIPT89012345',
      administratorName: 'Ivy Orange',
      administratorId: 'I567',
      administratorPosition: 'CEO',
      mainShareholders: 'Ivy Orange, Jack Purple',
      address: '951 Innovation Way',
      phone: '+1987654337',
      email: 'contact@iota.com',
      secondaryPhone: '+1987654338',
      secondaryEmail: 'admin@iota.com',
      additionalNotes: '',
    },
    {
      id: '20',
      type: CustomerType.BUSINESS,
      legalName: 'Kappa Labs',
      nuisNipt: 'NIPT90123456',
      administratorName: 'Jack Purple',
      administratorId: 'J890',
      administratorPosition: 'CTO',
      mainShareholders: 'Jack Purple, Kelly Pink',
      address: '357 Research Blvd',
      phone: '+1987654339',
      email: 'info@kappa.com',
      secondaryPhone: '+1987654340',
      secondaryEmail: 'support@kappa.com',
      additionalNotes: '',
    }
  ],
  selectedCustomer: null,
  loading: false,
  error: null,
  filters: {
    limit: 10,
    offset: 0
  },
  totalCount: 20
};

const customerSlice = createSlice({
  name: 'customers',
  initialState,
  reducers: {
    setCustomers: (state, action: PayloadAction<{ customers: Customer[]; total: number }>) => {
      state.customers = action.payload.customers;
      state.totalCount = action.payload.total;
      state.error = null;
    },
    setSelectedCustomer: (state, action: PayloadAction<CustomerDetailed>) => {
      state.selectedCustomer = action.payload;
      state.error = null;
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload;
      state.loading = false;
    },
    setFilters: (state, action: PayloadAction<Partial<CustomerFilters>>) => {
      state.filters = { ...state.filters, ...action.payload };
    },
    resetFilters: (state) => {
      state.filters = initialState.filters;
    },
    clearSelectedCustomer: (state) => {
      state.selectedCustomer = null;
    },
    addCustomer: (state, action: PayloadAction<Customer>) => {
      state.customers.push(action.payload);
      state.totalCount += 1;
    },
  }
});

export const {
  setCustomers,
  setSelectedCustomer,
  setLoading,
  setError,
  setFilters,
  resetFilters,
  clearSelectedCustomer,
  addCustomer
} = customerSlice.actions;

export default customerSlice.reducer;